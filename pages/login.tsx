import axios from "axios";
import { NextPage } from "next";
import Head from "next/head";
import Router from "next/router";
import React, { useState, useRef } from "react";
import "reactjs-popup/dist/index.css";
import { Waves } from "../components/svg/Waves";
import { useRouter } from "next/router";
import Image from "next/image";
import cheerio from "cheerio";

const Login: NextPage = () => {
	const [error, setError] = useState("");
	const [credentials, setCredentials] = useState({
		email: "",
		password: "",
	});

	const inputRef = useRef(null);

	const resetFileInput = () => {
		// resetting the input value
		inputRef.current.value = "";
	};

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		// // Verificar que la contraseña cumpla con los criterios de seguridad
		// const passwordValidator =
		// 	/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()/=+?[\]{}~-])[A-Za-z\d!@#$%^&*()/=+?[\]{}~-]{8,}$/;
		// const isPasswordValid = passwordValidator.test(credentials.password);
		// if (!isPasswordValid) {
		// 	resetFileInput();
		// 	setError(
		// 		"La contraseña debe contener al menos una letra mayúscula, una letra minúscula, un carácter numérico y un carácter especial y debe tener al menos 8 caracteres"
		// 	);

		// 	return;
		// }
		try {
			// Enviar una solicitud a la ruta de inicio de sesión en el backend
			const response = await axios.post("http://localhost:3002/auth/login", {
				email: credentials.email,
				password: credentials.password,
			});
			// Si el inicio de sesión es exitoso, almacene el token en una cookie

			document.cookie = `token=${response.data.body.token}`;
			// Redirigir a la ruta protegida
			Router.push("/dashboard");
		} catch (err) {
			// const message = err.response.data.message;
			// console.log(message);
			// setError(message);
			// Obtener el estado de error y el mensaje

			// Obtener el estado de error y el mensaje
			const status = err.response.status;
			console.log(status);
			// const message = err.response.data.message;

			// Establecer el mensaje de error apropiado según el estado del error
			let errorMessage = "";
			switch (status) {
				case 400:
					errorMessage = "You have entered an invalid password";
					break;
				case 401:
					errorMessage = "Unauthorized";
					break;
				case 403:
					errorMessage = "Forbidden";
					break;
				case 404:
					errorMessage =
						"La direccion de correo electronico o la contraseña que has introducido no son correctas.";
					break;
				case 500:
					errorMessage = 'parameter "email" has invalid "undefined" value';
					break;
				default:
					errorMessage = "An error occurred";
					break;
			}
			setError(errorMessage);
			// Resetear el formulario de inicio de sesión
			// Deshabilitado durante desarrollo=
			resetFileInput();
		}
	};

	return (
		<div className="flex flex-col items-center min-h-screen">
			<Head>
				<title>Gift Card - Log In</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/pastel.ico" />
			</Head>

			<main
				className="flex flex-col items-center justify-between min-h-screen w-full py-16 relative bg-gradient-to-b from-[#f5ccb1] to-[#d0cee2]"
				style={{
					background:
						"linear-gradient(to bottom,#f5ccb1 0%,#f5ccb1 50%, #d0cee2 50%, #d0cee2 100%)",
				}}
			>
				{/* TODO: SVG no se estira 100% */}
				<Waves className="absolute z-[0] w-full h-full pb-40" />
				<div className="flex flex-col justify-between items-center">
					<div className="pb-12 ">
						<div className="text-center ">
							<Image
								src="/assets/brand/gift.png"
								alt=""
								width={100}
								height={100}
								className="mx-auto"
							/>
							<h1 className="font-bold text-lg">Iniciar Sesión</h1>
							<p className="text-lg ">Inicia Sesión de la forma más rápida</p>
						</div>
					</div>
					<div className="relative ">
						<form
							onSubmit={(event) => {
								event.preventDefault();
								handleSubmit(event);
							}}
							className="flex flex-col gap-2 min-h-[340px] max-w-[388px] min-w-[388px] justify-between bg-[#ffffff]/80 shadow-sm rounded-[20px] py-10 px-12 "
						>
							<input
								className="w-full py-2 px-5 rounded-[7px] placeholder:text-[#515151] text-black "
								name="Gmail"
								ref={inputRef}
								required
								placeholder="Email"
								onChange={(e) =>
									setCredentials({
										...credentials,
										email: e.target.value,
									})
								}
							/>
							<input
								className="w-full py-2 px-5 rounded-[7px] placeholder:text-[#515151] text-black "
								type="password"
								name="password"
								ref={inputRef}
								required
								placeholder="Contraseña"
								aria-label="Password"
								onChange={(e) =>
									setCredentials({
										...credentials,
										password: e.target.value,
									})
								}
							/>
							{/* Check box "Recordar Inicio de sesion" */}
							<div>
								{/* <input type="checkbox" className="mr-2 w-3 h-3" /> */}
								<label className="text-[#515151]">
									{/* Recordar inicio de sesión */}
								</label>
							</div>
							<div className="text-center">
								{
									// Si hay un error, muestre el mensaje de error
									error && <p className="text-red-500">{error}</p>
								}
							</div>
							<button
								className="bg-gradient-to-b w-full from-[#91BA4D] to-[#91BA4D] disabled:opacity-50 rounded-[7px] text-white py-2 px-4"
								type="submit"
								disabled={!credentials}
							>
								Iniciar Sesion
							</button>

							<p className="text-[#181818]">
								{/* {" "}
              <a href="" className="font-bold">
                Click Aqui
              </a> */}
							</p>
						</form>
					</div>

					<div className=" max-w-[420px] pt-[153px] relative">
						<p className=" leading-5 tracking-wide text-center text-black">
							Hay detalles que roban sonrisas e invaden el corazon. Con
							nosotros, seguro lo encontras
						</p>
					</div>
				</div>
			</main>
		</div>
	);
};

export default Login;
